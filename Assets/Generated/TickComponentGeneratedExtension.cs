//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Entitas;

namespace Entitas {

    public partial class Entity {

        public TickComponent tick { get { return (TickComponent)GetComponent(BoidsComponentIds.Tick); } }
        public bool hasTick { get { return HasComponent(BoidsComponentIds.Tick); } }

        public Entity AddTick(ulong newValue, float newDeltatime) {
            var component = CreateComponent<TickComponent>(BoidsComponentIds.Tick);
            component.value = newValue;
            component.deltatime = newDeltatime;
            return AddComponent(BoidsComponentIds.Tick, component);
        }

        public Entity ReplaceTick(ulong newValue, float newDeltatime) {
            var component = CreateComponent<TickComponent>(BoidsComponentIds.Tick);
            component.value = newValue;
            component.deltatime = newDeltatime;
            ReplaceComponent(BoidsComponentIds.Tick, component);
            return this;
        }

        public Entity RemoveTick() {
            return RemoveComponent(BoidsComponentIds.Tick);
        }
    }

    public partial class Pool {

        public Entity tickEntity { get { return GetGroup(BoidsMatcher.Tick).GetSingleEntity(); } }
        public TickComponent tick { get { return tickEntity.tick; } }
        public bool hasTick { get { return tickEntity != null; } }

        public Entity SetTick(ulong newValue, float newDeltatime) {
            if(hasTick) {
                throw new EntitasException("Could not set tick!\n" + this + " already has an entity with TickComponent!",
                    "You should check if the pool already has a tickEntity before setting it or use pool.ReplaceTick().");
            }
            var entity = CreateEntity();
            entity.AddTick(newValue, newDeltatime);
            return entity;
        }

        public Entity ReplaceTick(ulong newValue, float newDeltatime) {
            var entity = tickEntity;
            if(entity == null) {
                entity = SetTick(newValue, newDeltatime);
            } else {
                entity.ReplaceTick(newValue, newDeltatime);
            }

            return entity;
        }

        public void RemoveTick() {
            DestroyEntity(tickEntity);
        }
    }
}

    public partial class BoidsMatcher {

        static IMatcher _matcherTick;

        public static IMatcher Tick {
            get {
                if(_matcherTick == null) {
                    var matcher = (Matcher)Matcher.AllOf(BoidsComponentIds.Tick);
                    matcher.componentNames = BoidsComponentIds.componentNames;
                    _matcherTick = matcher;
                }

                return _matcherTick;
            }
        }
    }
